/*
 * Balanced Binary Tree
 * Difficulty: Easy
 * 
 * Given a binary tree, determine if it is height-balanced.

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: true


Example 2:

Input: root = [1,2,2,3,3,null,null,4,4]
Output: false


Example 3:

Input: root = []
Output: true


 
Constraints:


	The number of nodes in the tree is in the range [0, 5000].
	-104 <= Node.val <= 104


 */

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if not root: return True
        if abs(self.height(root.left) - self.height(root.right))<2: return True and self.isBalanced(root.right) and self.isBalanced(root.left)
        else: return False

    def height(self,root):
        if not root: return True
        return 1+ max(self.height(root.left),self.height(root.right))