/*
 * Balanced Binary Tree
 * Difficulty: Easy
 * 
 * Given a binary tree, determine if it is height-balanced.

 
Example 1:

Input: root = [3,9,20,null,null,15,7]
Output: true


Example 2:

Input: root = [1,2,2,3,3,null,null,4,4]
Output: false


Example 3:

Input: root = []
Output: true


 
Constraints:


	The number of nodes in the tree is in the range [0, 5000].
	-104 <= Node.val <= 104


 */

class Solution:
    def isBalanced(self, root: Optional[TreeNode]) -> bool:
        if not root:
            return True

        left_height = root.left.h if root.left and hasattr(root.left, 'h') else self.height(root.left)
        right_height = root.right.h if root.right and hasattr(root.right, 'h') else self.height(root.right)

        if abs(left_height - right_height) < 2:
            return self.isBalanced(root.left) and self.isBalanced(root.right)
        else:
            return False

    def height(self, root):
        if not root:
            return 0
        h = 1 + max(self.height(root.left), self.height(root.right))
        root.h = h
        return h
