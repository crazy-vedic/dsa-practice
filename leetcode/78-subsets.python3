/*
 * Subsets
 * Difficulty: Medium
 * 
 * Given an integer array nums of unique elements, return all possible subsets (the power set).

The solution set must not contain duplicate subsets. Return the solution in any order.

 
Example 1:

Input: nums = [1,2,3]
Output: [[],[1],[2],[1,2],[3],[1,3],[2,3],[1,2,3]]


Example 2:

Input: nums = [0]
Output: [[],[0]]


 
Constraints:


	1 <= nums.length <= 10
	-10 <= nums[i] <= 10
	All the numbers of nums are unique.


 */

class Solution:
    def subsets(self, nums: List[int],i=0,current=set()) -> List[List[int]]:
        
        sol=[]

        def backtrack(state=[]):
            if len(state)==len(nums):
                sol.append([nums[i] for i in range(len(nums)) if state[i]])
                return
            newState1=state[:]
            newState1.append(0)
            state.append(1)
            backtrack(newState1)
            backtrack(state)
            print(state)

        backtrack()
        return sol
        