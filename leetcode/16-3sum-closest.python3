/*
 * 3Sum Closest
 * Difficulty: Medium
 * 
 * Given an integer array nums of length n and an integer target, find three integers in nums such that the sum is closest to target.

Return the sum of the three integers.

You may assume that each input would have exactly one solution.

 
Example 1:

Input: nums = [-1,2,1,-4], target = 1
Output: 2
Explanation: The sum that is closest to the target is 2. (-1 + 2 + 1 = 2).


Example 2:

Input: nums = [0,0,0], target = 1
Output: 0
Explanation: The sum that is closest to the target is 0. (0 + 0 + 0 = 0).


 
Constraints:


	3 <= nums.length <= 500
	-1000 <= nums[i] <= 1000
	-104 <= target <= 104


 */

class Solution:
    def threeSumClosest(self, nums: List[int], target: int) -> int:
        nums.sort()
        print(nums)
        i=1
        left,right=i-1,i+1
        currSum=sum([nums[i],nums[left],nums[right]])
        closestSum=currSum
        while i<len(nums)-1:
            currSum=sum([nums[left],nums[i],nums[right]])
            closestSum=currSum if abs(currSum-target)<abs(closestSum-target) else closestSum
            # print(left,i,right,currSum,target)
            if currSum>target:
                if left>0:
                    left-=1
                    continue
                else:
                    i+=1
                    left,right=i-1,i+1
                    continue
            elif currSum<target:
                if right<len(nums)-1:
                    right+=1
                    continue
                else:
                    i+=1
                    left,right=i-1,i+1
                    continue
            else:
                return target
        closestSum=currSum if abs(currSum-target)<abs(closestSum-target) else closestSum
        return closestSum